const { createBot, createProvider, createFlow, addKeyword, EVENTS } = require('@bot-whatsapp/bot')
const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MySQLAdapter = require('@bot-whatsapp/database/mysql')

// Contacto espec√≠fico donde se enviar√° la informaci√≥n
const CONTACTO_ADMIN = '5214494877990@s.whatsapp.net'

// ==== Sistema de Timeouts Global ====
class TimeoutManager {
  constructor() {
    this.timeouts = new Map();
    this.intervals = new Map();
  }

  setTimeout(userPhone, callback, delay) {
    this.clearTimeout(userPhone);
    const timeoutId = setTimeout(callback, delay);
    this.timeouts.set(userPhone, timeoutId);
    return timeoutId;
  }

  setInterval(userPhone, callback, delay) {
    this.clearInterval(userPhone);
    const intervalId = setInterval(callback, delay);
    this.intervals.set(userPhone, intervalId);
    return intervalId;
  }

  clearTimeout(userPhone) {
    if (this.timeouts.has(userPhone)) {
      clearTimeout(this.timeouts.get(userPhone));
      this.timeouts.delete(userPhone);
    }
  }

  clearInterval(userPhone) {
    if (this.intervals.has(userPhone)) {
      clearInterval(this.intervals.get(userPhone));
      this.intervals.delete(userPhone);
    }
  }

  clearAll(userPhone) {
    this.clearTimeout(userPhone);
    this.clearInterval(userPhone);
  }
}

const timeoutManager = new TimeoutManager();

// ==== Funci√≥n para manejar inactividad ====
async function manejarInactividad(ctx, state, flowDynamic, gotoFlow) {
  if (ctx.from === CONTACTO_ADMIN) return;

  const userPhone = ctx.from;

  // Limpiar timeout anterior si existe
  timeoutManager.clearTimeout(userPhone);

  // Configurar nuevo timeout para 2 minutos
  timeoutManager.setTimeout(userPhone, async () => {
    try {
      const myState = await state.getMyState();

      // Solo mostrar mensaje si no est√° en proceso largo
      if (myState?.estadoUsuario !== ESTADOS_USUARIO.EN_PROCESO_LARGO) {
        await flowDynamic([
          '‚è∞ *Sesi√≥n Inactiva*',
          '',
          'He notado que no has interactuado conmigo en los √∫ltimos 2 minutos.',
          '',
          'üí° **Para reactivar el bot, escribe:**',
          '‚Ä¢ *hola* - Para reiniciar la conversaci√≥n',
          '‚Ä¢ *men√∫* - Para ver las opciones disponibles',
          '',
          '¬°Estoy aqu√≠ para ayudarte! üê¶'
        ].join('\n'));

        // Limpiar estado temporal pero mantener informaci√≥n b√°sica
        await state.update({
          estadoUsuario: ESTADOS_USUARIO.LIBRE,
          ultimaInteraccion: Date.now()
        });
      }
    } catch (error) {
      console.error('‚ùå Error en manejo de inactividad:', error);
    }
  }, 2 * 60 * 1000); // 2 minutos
}

// ==== Funci√≥n para reiniciar inactividad ====
async function reiniciarInactividad(ctx, state, flowDynamic, gotoFlow) {
  await manejarInactividad(ctx, state, flowDynamic, gotoFlow);
}

// ==== Configuraci√≥n para XAMPP ====
const adapterDB = new MySQLAdapter({
  host: 'localhost',
  user: 'root',
  database: 'bot_whatsapp',
  password: '',
  port: 3306,
})

// ==== ALTERNATIVA: Crear nuestra propia conexi√≥n MySQL ====
const mysql = require('mysql2/promise');

// Variable global para nuestra conexi√≥n
let conexionMySQL = null;

let reconectando = false;

async function crearConexionMySQL() {
  try {
    const connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'bot_whatsapp',
      port: 3306,
      connectTimeout: 60000,
      acquireTimeout: 60000,
      timeout: 60000,
      enableKeepAlive: true,
      keepAliveInitialDelay: 10000
    });

    connection.on('error', (err) => {
      console.error('‚ùå Error en conexi√≥n MySQL:', err.message);
      if (err.code === 'PROTOCOL_CONNECTION_LOST' || err.code === 'ECONNRESET') {
        console.log('üîÑ Reconectando a MySQL...');
        reconectarMySQL();
      }
    });

    console.log('‚úÖ Conexi√≥n MySQL creada exitosamente');
    return connection;
  } catch (error) {
    console.error('‚ùå Error creando conexi√≥n MySQL:', error.message);
    return null;
  }
}

async function reconectarMySQL() {
  if (reconectando) return;

  reconectando = true;
  console.log('üîÑ Iniciando reconexi√≥n a MySQL...');

  try {
    if (conexionMySQL) {
      try {
        await conexionMySQL.end();
      } catch (e) {
        console.log('‚ö†Ô∏è Cerrando conexi√≥n anterior...');
      }
    }

    conexionMySQL = await crearConexionMySQL();
    reconectando = false;

    if (conexionMySQL) {
      console.log('‚úÖ Reconexi√≥n a MySQL exitosa');
    }
  } catch (error) {
    console.error('‚ùå Error en reconexi√≥n MySQL:', error.message);
    reconectando = false;
    setTimeout(() => {
      reconectarMySQL();
    }, 5000);
  }
}

// ==== Funciones para MySQL usando nuestra propia conexi√≥n ====
async function inicializarMySQL() {
  if (!conexionMySQL || !conexionMySQL._closing) {
    conexionMySQL = await crearConexionMySQL();
  }

  if (conexionMySQL) {
    try {
      await conexionMySQL.execute('SELECT 1');
    } catch (error) {
      console.log('üîÑ Conexi√≥n MySQL inactiva, reconectando...');
      await reconectarMySQL();
    }
  }

  return conexionMySQL;
}

// ==== FUNCI√ìN LIMPIAR ESTADO MYSQL ====
async function limpiarEstadoMySQL(userPhone) {
  try {
    await inicializarMySQL();
    if (!conexionMySQL) return;

    const query = `DELETE FROM user_states WHERE user_phone = ?`;
    await conexionMySQL.execute(query, [userPhone]);
    console.log(`‚úÖ Estado limpiado en MySQL para: ${userPhone}`);
  } catch (error) {
    console.error('‚ùå Error limpiando estado en MySQL:', error.message);
  }
}

// ==== ACTUALIZAR FUNCI√ìN GUARDAR ESTADO MYSQL ====
async function guardarEstadoMySQL(userPhone, estado, metadata = {}, userData = {}) {
  try {
    await inicializarMySQL();
    if (!conexionMySQL) {
      console.log('‚ö†Ô∏è No hay conexi√≥n MySQL, omitiendo guardado');
      return false;
    }

    const query = `
      INSERT INTO user_states (user_phone, estado_usuario, estado_metadata, numero_control, nombre_completo, identificacion_subida, timestamp_identificacion)
      VALUES (?, ?, ?, ?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE 
      estado_usuario = VALUES(estado_usuario),
      estado_metadata = VALUES(estado_metadata),
      numero_control = VALUES(numero_control),
      nombre_completo = VALUES(nombre_completo),
      identificacion_subida = VALUES(identificacion_subida),
      timestamp_identificacion = VALUES(timestamp_identificacion),
      updated_at = CURRENT_TIMESTAMP
    `;

    const values = [
      userPhone,
      estado,
      JSON.stringify(metadata),
      userData.numeroControl || null,
      userData.nombreCompleto || null,
      userData.identificacionSubida || false,
      userData.timestampIdentificacion || null
    ];

    const valoresFinales = values.map(val => val === undefined ? null : val);

    await conexionMySQL.execute(query, valoresFinales);
    console.log(`‚úÖ Estado guardado en MySQL para: ${userPhone}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error guardando estado en MySQL:', error.message);
    return false;
  }
}

// ==== FUNCI√ìN OBTENER ESTADO MYSQL ====
async function obtenerEstadoMySQL(userPhone) {
  try {
    await inicializarMySQL();
    if (!conexionMySQL) return null;

    const query = `SELECT * FROM user_states WHERE user_phone = ?`;
    const [rows] = await conexionMySQL.execute(query, [userPhone]);

    if (rows.length > 0) {
      const estado = rows[0];
      let estadoMetadata = {};

      try {
        estadoMetadata = JSON.parse(estado.estado_metadata || '{}');
      } catch (e) {
        console.error('‚ùå Error parseando estado_metadata:', e);
      }

      return {
        estadoUsuario: estado.estado_usuario,
        estadoMetadata: estadoMetadata,
        numeroControl: estado.numero_control,
        nombreCompleto: estado.nombre_completo
      };
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo estado de MySQL:', error.message);
  }

  return null;
}

// ==== Sistema de Estados del Usuario ====
const ESTADOS_USUARIO = {
  LIBRE: 'libre',
  EN_PROCESO_LARGO: 'en_proceso_largo',
  ESPERANDO_DATOS: 'esperando_datos',
  EN_MENU: 'en_menu'
};

// ==== Funci√≥n para redirecci√≥n segura despu√©s de timeout ====
async function redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic) {
  try {
    await limpiarEstado(state);
    await new Promise(resolve => setTimeout(resolve, 100));
    return gotoFlow(flowMenu);
  } catch (error) {
    console.error('‚ùå Error en redirecci√≥n al men√∫:', error);
    await flowDynamic('üîß Reiniciando bot... Por favor escribe *men√∫* para continuar.');
    await limpiarEstado(state);
    return gotoFlow(flowMenu);
  }
}

// ==== Funciones de Gesti√≥n de Estados ====
async function actualizarEstado(state, nuevoEstado, metadata = {}) {
  try {
    const estadoActual = await state.getMyState();

    const userData = {
      numeroControl: estadoActual?.numeroControl || null,
      nombreCompleto: estadoActual?.nombreCompleto || null
    };

    const nuevoMetadata = {
      ...metadata,
      ultimaActualizacion: Date.now()
    };

    await state.update({
      estadoUsuario: nuevoEstado,
      estadoMetadata: nuevoMetadata
    });

    if (nuevoEstado === ESTADOS_USUARIO.EN_PROCESO_LARGO) {
      await guardarEstadoMySQL(state.id, nuevoEstado, nuevoMetadata, userData);
    }
  } catch (error) {
    console.error('‚ùå Error actualizando estado:', error);
  }
}

// ==== ACTUALIZAR FUNCI√ìN LIMPIAR ESTADO ====
async function limpiarEstado(state) {
  try {
    const myState = await state.getMyState();
    const userPhone = state.id;

    if (userPhone) {
      timeoutManager.clearAll(userPhone);
    }

    await state.update({
      estadoUsuario: ESTADOS_USUARIO.LIBRE,
      estadoMetadata: {},
      numeroControl: null,
      nombreCompleto: null,
      correoInstitucional: null,
      esTrabajador: null,
      identificacionSubida: false,
      infoIdentificacion: null,
      timestampIdentificacion: null,
      ultimaInteraccion: Date.now()
    });

    console.log('‚úÖ Estado limpiado correctamente');
  } catch (error) {
    console.error('‚ùå Error limpiando estado:', error);
  }
}

async function restaurarEstadoInicial(ctx, state) {
  if (!ctx.from) return false;

  try {
    const estadoMySQL = await obtenerEstadoMySQL(ctx.from);

    if (estadoMySQL && estadoMySQL.estadoUsuario === ESTADOS_USUARIO.EN_PROCESO_LARGO) {
      const tiempoTranscurrido = Date.now() - (estadoMySQL.estadoMetadata.ultimaActualizacion || Date.now());
      const minutosTranscurridos = Math.floor(tiempoTranscurrido / 60000);

      if (minutosTranscurridos > 30) {
        await limpiarEstadoMySQL(ctx.from);
        return false;
      }

      await state.update({
        estadoUsuario: estadoMySQL.estadoUsuario,
        estadoMetadata: estadoMySQL.estadoMetadata,
        numeroControl: estadoMySQL.numeroControl,
        nombreCompleto: estadoMySQL.nombreCompleto
      });

      console.log(`üîÑ Estado restaurado para: ${ctx.from}`);
      return true;
    }
  } catch (error) {
    console.error('‚ùå Error restaurando estado inicial:', error);
  }

  return false;
}

// ==== Funci√≥n para mostrar estado de bloqueo ====
async function mostrarEstadoBloqueado(flowDynamic, myState) {
  const metadata = myState.estadoMetadata || {};
  const tiempoTranscurrido = Date.now() - (metadata.ultimaActualizacion || Date.now());
  const minutosTranscurridos = Math.floor(tiempoTranscurrido / 60000);
  const minutosRestantes = Math.max(0, 30 - minutosTranscurridos);

  await flowDynamic([
    'üîí *Proceso en Curso* üîí',
    '',
    `üìã ${metadata.tipo || 'Proceso largo'}`,
    `‚è∞ Tiempo transcurrido: ${minutosTranscurridos} minutos`,
    `‚è≥ Tiempo restante: ${minutosRestantes} minutos`,
    '',
    'üîÑ **Estamos trabajando en tu solicitud...**',
    'üì± Por favor espera, este proceso toma aproximadamente 30 minutos',
    '',
    'üí° **Para ver el progreso actual escribe:**',
    '*estado*',
    '',
    '‚è∞ El proceso continuar√° autom√°ticamente.'
  ].join('\n'));
}

// ==== Funci√≥n de verificaci√≥n MEJORADA ====
async function verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow }) {
  if (ctx.from === CONTACTO_ADMIN) return false;

  try {
    const myState = await state.getMyState();

    if (myState?.estadoUsuario === ESTADOS_USUARIO.EN_PROCESO_LARGO) {
      await mostrarEstadoBloqueado(flowDynamic, myState);
      return true;
    }
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de estado bloqueado:', error);
  }

  return false;
}

// ==== Funci√≥n para enviar identificaci√≥n al admin - SIMPLIFICADA ====
async function enviarIdentificacionAlAdmin(provider, userData) {
  if (!provider) {
    console.error('‚ùå Provider no disponible')
    return false
  }

  try {
    const sock = provider.vendor
    
    if (!sock) {
      console.error('‚ùå Socket de Baileys no disponible')
      return false
    }

    await sock.sendMessage(CONTACTO_ADMIN, {
      text: `üì∏ *IDENTIFICACI√ìN RECIBIDA*\n\nüë§ Nombre: ${userData.nombre}\nüìß ${userData.tipo}: ${userData.identificacion}\n‚è∞ Hora: ${new Date().toLocaleString('es-MX')}\n\n‚úÖ El usuario ha subido su identificaci√≥n correctamente.`
    });
    
    console.log('‚úÖ Notificaci√≥n de identificaci√≥n enviada al administrador');
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando notificaci√≥n de identificaci√≥n:', error.message);
    return false;
  }
}

// ==== Funci√≥n para enviar mensajes al contacto ====
async function enviarAlAdmin(provider, mensaje) {
  if (!provider) {
    console.error('‚ùå Provider no est√° disponible')
    return false
  }

  try {
    console.log('üì§ Intentando enviar mensaje al administrador...')

    const sock = provider.vendor

    if (!sock) {
      console.error('‚ùå Socket de Baileys no disponible')
      return false
    }

    await sock.sendMessage(CONTACTO_ADMIN, {
      text: mensaje
    });

    console.log('‚úÖ Informaci√≥n enviada al administrador correctamente')
    return true
  } catch (error) {
    console.error('‚ùå Error enviando informaci√≥n al administrador:', error.message)

    if (error.message.includes('not-authorized')) {
      console.log('‚ö†Ô∏è El administrador no te tiene agregado como contacto')
    }
    if (error.message.includes('blocked')) {
      console.log('‚ö†Ô∏è El administrador te tiene bloqueado')
    }

    return false
  }
}

// ==== Funciones de validaci√≥n ====
function isValidText(input) {
  if (!input || typeof input !== 'string') return false
  if (input.trim().length === 0) return false
  if (input.includes('sticker') || input.includes('image') || input.includes('video')) return false
  return true
}

// ==== Validar n√∫mero de control ====
function validarNumeroControl(numeroControl) {
  const letrasPermitidas = ['D', 'C', 'B', 'R', 'G', 'd', 'c', 'b', 'r', 'g']
  const posicion3Permitidas = ['9', '0', '2', '4', '5', '1', '3', '6']
  const posicion4Permitidas = ['0', '2', '5', '6', '9', '1', '5', '7', '3', '4']

  if (numeroControl.length === 8) {
    const esSoloNumeros = /^\d+$/.test(numeroControl)
    const posicion2Correcta = posicion3Permitidas.includes(numeroControl[2])
    const posicion3Correcta = posicion4Permitidas.includes(numeroControl[3])
    return esSoloNumeros && posicion2Correcta && posicion3Correcta
  }

  if (numeroControl.length === 9) {
    const primeraLetraValida = letrasPermitidas.includes(numeroControl[0])
    const restoEsNumeros = /^\d+$/.test(numeroControl.slice(1))
    const posicion3Correcta = posicion3Permitidas.includes(numeroControl[3])
    const posicion4Correcta = posicion4Permitidas.includes(numeroControl[4])
    return primeraLetraValida && restoEsNumeros && posicion3Correcta && posicion4Correcta
  }

  return false
}

// ==== Funci√≥n para validar que es una imagen ====
function esImagenValida(message) {
  if (!message) return false;

  const esImagen = message.type === 'image' ||
    message.type === 'sticker' ||
    (message.type === 'document' &&
      message.mimetype &&
      message.mimetype.startsWith('image/'));

  return esImagen;
}

// ==== Funci√≥n para obtener informaci√≥n de la imagen ====
function obtenerInfoImagen(message) {
  if (!message) return null;

  return {
    tipo: message.type,
    mimetype: message.mimetype || 'image/jpeg',
    timestamp: message.timestamp || Date.now()
  };
}

// ==== Funci√≥n para validar correo institucional de trabajadores ====
function validarCorreoTrabajador(correo) {
  const regex = /^[a-zA-Z0-9._%+-]+@aguascalientes\.tecnm\.mx$/;
  return regex.test(correo) && correo.length > 0;
}

// ==== Funci√≥n auxiliar para detectar saludos ====
function esSaludoValido(texto) {
  if (!texto || typeof texto !== 'string') return false;

  const textoLimpio = texto.toLowerCase().trim();
  const saludos = [
    'hola', 'ole', 'alo', 'inicio', 'Inicio', 'comenzar', 'empezar',
    'buenos d√≠as', 'buenas tardes', 'buenas noches',
    'buenos dias', 'buenas tardes', 'buenas noches',
    'hola.', 'hola!', 'hola?', 'ayuda', 'Hola', '.',
    'buenos d√≠as, tengo un problema', 'buenas tardes, tengo un problema',
    'buenas noches, tengo un problema', 'buenos d√≠as tengo un problema',
    'buenas tardes tengo un problema', 'buenas noches tengo un problema',
    'tengo un problema', 'necesito ayuda', 'ayuda', 'tengo un problema con mi cuenta',
    'no puedo acceder a mi cuenta', 'problema con mi cuenta', 'problema con mi acceso'
  ];

  return saludos.some(saludo => textoLimpio.includes(saludo));
}

/// ==== FLUJO INTERCEPTOR GLOBAL ====
const flowInterceptorGlobal = addKeyword(EVENTS.WELCOME)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow, endFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return endFlow();

    await reiniciarInactividad(ctx, state, flowDynamic, gotoFlow);

    const estadoRestaurado = await restaurarEstadoInicial(ctx, state);

    if (estadoRestaurado) {
      await mostrarEstadoBloqueado(flowDynamic, await state.getMyState());
      return gotoFlow(flowBloqueoActivo);
    }

    const input = ctx.body?.toLowerCase().trim();

    if (!esSaludoValido(input)) {
      const myState = await state.getMyState();
      if (!myState?.estadoUsuario || myState.estadoUsuario === ESTADOS_USUARIO.LIBRE) {
        const ultimaInteraccion = myState?.ultimaInteraccion || 0;
        const tiempoInactivo = Date.now() - ultimaInteraccion;

        if (tiempoInactivo > 60000) {
          await flowDynamic([
            'üîí *Bot Inactivo*',
            '',
            'Para comenzar a usar el bot, escribe la palabra:',
            '',
            'üåü *hola*',
            '',
            '¬°Estar√© encantado de ayudarte! üê¶'
          ].join('\n'));
        }
        return endFlow();
      }
    }

    return endFlow();
  });

// ==== Flujo de Bloqueo Activo ====
const flowBloqueoActivo = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const myState = await state.getMyState();

    if (!myState?.estadoUsuario || myState.estadoUsuario !== ESTADOS_USUARIO.EN_PROCESO_LARGO) {
      await limpiarEstado(state);
      return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
    }

    const input = ctx.body?.toLowerCase().trim();

    if (input === 'estado') {
      await mostrarEstadoBloqueado(flowDynamic, myState);
    } else if (input && input !== 'estado') {
      await flowDynamic([
        '‚è≥ *Proceso en curso*',
        '',
        'Tu solicitud est√° siendo procesada...',
        '',
        'üí° **Para ver el progreso actual escribe:**',
        '*estado*',
        '',
        'üîÑ El proceso continuar√° autom√°ticamente.'
      ].join('\n'));
    }
  })
  .addAnswer(
    { capture: true },
    async (ctx, { gotoFlow }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      const input = ctx.body.toLowerCase().trim();

      if (input === 'estado') {
        return gotoFlow(flowComandosEspeciales);
      }

      return gotoFlow(flowBloqueoActivo);
    }
  );

// ==== FLUJO PARA BLOQUEAR AL ADMINISTRADOR ====
const flowBlockAdmin = addKeyword(EVENTS.WELCOME)
  .addAction(async (ctx, { endFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) {
      console.log('üö´ Mensaje del administrador bloqueado - No se procesar√°')
      return endFlow()
    }
  })

// ==== SUBMEN√ö PARA OPCI√ìN 1 - RESTABLECER CONTRASE√ëA ====
const flowSubMenuContrasena = addKeyword(EVENTS.ACTION)
  .addAnswer(
    'üë• *Selecciona tu tipo de usuario:*\n\n' +
    '1Ô∏è‚É£ ¬øEres un alumno?\n' +
    '2Ô∏è‚É£ ¬øEres un trabajador?\n\n' +
    'üîô Escribe *men√∫* para volver al men√∫ principal.',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      const opcion = ctx.body.trim().toLowerCase();

      if (opcion === 'menu' || opcion === 'men√∫') {
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (opcion === '1') {
        await flowDynamic('üéì Perfecto, eres alumno. Vamos a comenzar con el proceso...');
        return gotoFlow(flowCapturaNumeroControl);
      }

      if (opcion === '2') {
        await flowDynamic('üë®‚Äçüíº Perfecto, eres trabajador. Vamos a comenzar con el proceso...');
        return gotoFlow(flowCapturaCorreoTrabajador);
      }

      await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *1* o *2*.');
      return gotoFlow(flowSubMenuContrasena);
    }
  );

// ==== Flujo de captura de correo para trabajador ====
const flowCapturaCorreoTrabajador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en correo trabajador');
        await flowDynamic('‚è±Ô∏è No recibimos tu correo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now(),
      esTrabajador: true
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *correo institucional* (ejemplo: nombre.apellido@aguascalientes.tecnm.mx):',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim().toLowerCase();

      if (input === 'menu' || input === 'men√∫') {
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu correo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaCorreoTrabajador);
      }

      if (!isValidText(input) || !validarCorreoTrabajador(input)) {
        await flowDynamic('‚ùå Correo institucional inv√°lido. Debe ser: nombre.apellido@aguascalientes.tecnm.mx\nIntenta de nuevo o escribe *men√∫* para volver.');
        return gotoFlow(flowCapturaCorreoTrabajador);
      }

      await state.update({
        correoInstitucional: input,
        esTrabajador: true
      });
      await flowDynamic(`‚úÖ Recibimos tu correo institucional: *${input}*`);

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaNombreTrabajador);
    }
  );

// ==== Flujo de captura de correo para trabajador (AUTENTICADOR) ====
const flowCapturaCorreoTrabajadorAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en correo trabajador - autenticador');
        await flowDynamic('‚è±Ô∏è No recibimos tu correo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now(),
      esTrabajador: true
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *correo institucional* (ejemplo: nombre.apellido@aguascalientes.tecnm.mx):',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim().toLowerCase();

      if (input === 'menu' || input === 'men√∫') {
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu correo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaCorreoTrabajadorAutenticador);
      }

      if (!isValidText(input) || !validarCorreoTrabajador(input)) {
        await flowDynamic('‚ùå Correo institucional inv√°lido. Debe ser: nombre.apellido@aguascalientes.tecnm.mx\nIntenta de nuevo o escribe *men√∫* para volver.');
        return gotoFlow(flowCapturaCorreoTrabajadorAutenticador);
      }

      await state.update({
        correoInstitucional: input,
        esTrabajador: true
      });
      await flowDynamic(`‚úÖ Recibimos tu correo institucional: *${input}*`);

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaNombreTrabajadorAutenticador);
    }
  );

// ==== SUBMEN√ö PARA OPCI√ìN 2 - RESTABLECER AUTENTICADOR ====
const flowSubMenuAutenticador = addKeyword(EVENTS.ACTION)
  .addAnswer(
    'üë• *Selecciona tu tipo de usuario:*\n\n' +
    '1Ô∏è‚É£ ¬øEres un alumno?\n' +
    '2Ô∏è‚É£ ¬øEres un trabajador?\n\n' +
    'üîô Escribe *men√∫* para volver al men√∫ principal.',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      const opcion = ctx.body.trim().toLowerCase();

      if (opcion === 'menu' || opcion === 'men√∫') {
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (opcion === '1') {
        await flowDynamic('üéì Perfecto, eres alumno. Vamos a comenzar con el proceso...');
        return gotoFlow(flowCapturaNumeroControlAutenticador);
      }

      if (opcion === '2') {
        await flowDynamic('üë®‚Äçüíº Perfecto, eres trabajador. Vamos a comenzar con el proceso...');
        return gotoFlow(flowCapturaCorreoTrabajadorAutenticador);
      }

      await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *1* o *2*.');
      return gotoFlow(flowSubMenuAutenticador);
    }
  );

// ==== Flujo final de contrase√±a ====
const flowContrasena = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, provider, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const myState = (await state.getMyState()) || {};
    const nombreCompleto = myState.nombreCompleto;
    const numeroControl = myState.numeroControl;
    const correoInstitucional = myState.correoInstitucional;
    const esTrabajador = myState.esTrabajador;

    if (!nombreCompleto || (!numeroControl && !correoInstitucional)) {
      console.log('‚ùå Datos incompletos, redirigiendo a captura...');
      await flowDynamic('‚ùå No tenemos tu informaci√≥n completa. Volvamos a empezar.');
      return gotoFlow(flowSubMenuContrasena);
    }

    await actualizarEstado(state, ESTADOS_USUARIO.EN_PROCESO_LARGO, {
      tipo: "üîê Restablecimiento de Contrase√±a",
      inicio: Date.now(),
      esTrabajador: esTrabajador || false
    });

    const phone = ctx.from;
    const identificacion = esTrabajador ? correoInstitucional : numeroControl;
    const tipoUsuario = esTrabajador ? "Trabajador" : "Alumno";

    const mensajeAdmin = `üîî *NUEVA SOLICITUD DE RESTABLECIMIENTO DE CONTRASE√ëA* üîî\n\nüìã *Informaci√≥n del usuario:*\nüë§ Nombre: ${nombreCompleto}\nüë• Tipo: ${tipoUsuario}\nüìß ${esTrabajador ? 'Correo' : 'N√∫mero de control'}: ${identificacion}\nüìû Tel√©fono: ${phone}\nüÜî Identificaci√≥n: ${myState.identificacionSubida ? '‚úÖ SUBIDA' : '‚ùå PENDIENTE'}\n‚è∞ Hora: ${new Date().toLocaleString('es-MX')}\nüîê Contrase√±a temporal asignada: *SoporteCC1234$*\n\n‚ö†Ô∏è Reacciona para validar que est√° listo`;

    const envioExitoso = await enviarAlAdmin(provider, mensajeAdmin);

    if (envioExitoso) {
      await flowDynamic('‚è≥ Perm√≠tenos un momento, vamos a restablecer tu contrase√±a... \n\n *Te solicitamos no enviar mensajes en lo que realizamos est√© proceso, est√© proceso durar√° aproximadamente 30 minutos.*');
    } else {
      await flowDynamic('‚ö†Ô∏è Hemos registrado tu solicitud. Si no recibes respuesta, contacta directamente al centro de c√≥mputo.');
    }

    let minutosRestantes = 30;

    const intervalId = setInterval(async () => {
      minutosRestantes -= 10;
      if (minutosRestantes > 0) {
        await flowDynamic(`‚è≥ Hola *${nombreCompleto}*, faltan *${minutosRestantes} minutos* para completar el proceso...`);
      }
    }, 10 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        intervalId: intervalId
      }
    });

    const timeoutId = setTimeout(async () => {
      clearInterval(intervalId);

      try {
        await flowDynamic(`‚úÖ Se restableci√≥ correctamente tu contrase√±a.\nTu nueva contrase√±a temporal es: *SoporteCC1234$*`);

        const correoUsuario = esTrabajador ? correoInstitucional : `${numeroControl}@aguascalientes.tecnm.mx`;

        console.log(`‚úÖ Contrase√±a enviada correctamente a *${nombreCompleto}* - ${esTrabajador ? 'Correo' : 'Matr√≠cula'}: *${identificacion}*`);

        await flowDynamic(
          `*Instrucciones para acceder* \n\n *Te recomendamos que est√© primer inicio de sesi√≥n lo realices desde tu computadora* para poder configurar todo correctamente, despu√©s del primer inicio de sesi√≥n ya puedes configurar tus aplicaciones \n\n Paso 1.- Cierra la pesta√±a actual en donde estabas intentando acceder al correo. \n Paso 2.- Ingresa a la p√°gina de: https://office.com o en la p√°gina: https://login.microsoftonline.com/?whr=tecnm.mx para acceder a tu cuenta institucional. \n Paso 3.- Ingresa tu correo institucional recuerda que es: ${correoUsuario} \n Paso 4.- Ingresa la contrase√±a temporal: *SoporteCC1234$*  \n Paso 5.- Una vez que ingreses te va a solicitar que realices el cambio de tu contrase√±a. En contrase√±a actual es la contrase√±a temporal: *SoporteCC1234$* en los siguientes campos vas a generar tu nueva contrase√±a personalizada \n (Por recomendaci√≥n de seguridad procura que tenga m√≠nimo 11 caracteres, al menos deber√≠a de contener: Una may√∫scula, una min√∫scula, un n√∫mero y un car√°cter especial: %$#!&/-_.*+). \n Con esto terminar√≠amos el proceso total del cambio de contrase√±a.`
        );

        await flowDynamic(
          'üîê Por seguridad, *Te recomendamos que est√© primer inicio de sesi√≥n lo realices desde tu computadora* y de esta manera poder cambiar tu contrase√±a de una manera m√°s c√≥moda.\n\n üîô Escribe *men√∫* para volver a ver el men√∫ principal.'
        );

      } catch (error) {
        console.error('‚ùå Error enviando mensaje final:', error.message);
      }

      await limpiarEstado(state);
    }, 30 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        timeoutId: timeoutId
      }
    });
  })
  .addAnswer(
    { capture: true },
    async (ctx, { gotoFlow }) => {
      if (ctx.from === CONTACTO_ADMIN) return;
      return gotoFlow(flowBloqueoActivo);
    }
  );

// ==== Flujo de captura para identificaci√≥n oficial ====
const flowCapturaIdentificacion = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 3 minutos en identificaci√≥n');
        await flowDynamic('‚è±Ô∏è No recibimos tu identificaci√≥n. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 3 * 60 * 1000);

    await state.update({
      timeoutCapturaIdentificacion: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    [
      'üì∏ *Verificaci√≥n de Identidad* üì∏',
      '',
      'Para continuar con el proceso, necesitamos verificar tu identidad.',
      '',
      'üìã **Por favor toma una foto CLARA de tu identificaci√≥n oficial:**',
      '‚Ä¢ INE/IFE',
      '‚Ä¢ Licencia de conducir',
      '‚Ä¢ Pasaporte',
      '‚Ä¢ Credencial escolar con foto',
      '',
      '‚ö†Ô∏è **Aseg√∫rate de que:**',
      '‚Ä¢ La foto sea legible',
      '‚Ä¢ Los datos sean visibles',
      '‚Ä¢ La imagen est√© bien iluminada',
      '',
      'üîí Tu informaci√≥n est√° protegida y ser√° usada solo para verificaci√≥n.'
    ].join('\n'),
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state, provider }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      if (!esImagenValida(ctx)) {
        await flowDynamic([
          '‚ùå *No recibimos una imagen v√°lida*',
          '',
          'Por favor env√≠a una FOTO CLARA de tu identificaci√≥n oficial:',
          '',
          'üì∑ Toma una foto de:',
          '‚Ä¢ INE/IFE por ambos lados',
          '‚Ä¢ Licencia de conducir',
          '‚Ä¢ Pasaporte',
          '‚Ä¢ Credencial escolar con foto',
          '',
          '‚ö†Ô∏è Aseg√∫rate de que se vean claramente tus datos.'
        ].join('\n'));
        return gotoFlow(flowCapturaIdentificacion);
      }

      const infoImagen = obtenerInfoImagen(ctx);
      const myState = await state.getMyState();
      
      await state.update({
        identificacionSubida: true,
        infoIdentificacion: infoImagen,
        timestampIdentificacion: Date.now(),
        imagenIdentificacion: ctx.message
      });

      await flowDynamic('‚úÖ ¬°Perfecto! Hemos recibido tu identificaci√≥n correctamente.');

      const userData = {
        nombre: myState.nombreCompleto || 'Por confirmar',
        identificacion: myState.esTrabajador ? myState.correoInstitucional : myState.numeroControl,
        tipo: myState.esTrabajador ? 'Trabajador' : 'Alumno'
      };

      await enviarIdentificacionAlAdmin(provider, userData);

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowContrasena);
    }
  );

// ==== Flujo similar para autenticador ====
const flowCapturaIdentificacionAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 3 minutos en identificaci√≥n - autenticador');
        await flowDynamic('‚è±Ô∏è No recibimos tu identificaci√≥n. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 3 * 60 * 1000);

    await state.update({
      timeoutCapturaIdentificacion: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    [
      'üì∏ *Verificaci√≥n de Identidad* üì∏',
      '',
      'Para continuar con la configuraci√≥n del autenticador, necesitamos verificar tu identidad.',
      '',
      'üìã **Por favor toma una foto CLARA de tu identificaci√≥n oficial:**',
      '‚Ä¢ INE/IFE',
      '‚Ä¢ Licencia de conducir',
      '‚Ä¢ Pasaporte',
      '‚Ä¢ Credencial escolar con foto',
      '',
      '‚ö†Ô∏è **Aseg√∫rate de que:**',
      '‚Ä¢ La foto sea legible',
      '‚Ä¢ Los datos sean visibles',
      '‚Ä¢ La imagen est√© bien iluminada'
    ].join('\n'),
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state, provider }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      if (!esImagenValida(ctx)) {
        await flowDynamic([
          '‚ùå *No recibimos una imagen v√°lida*',
          '',
          'Por favor env√≠a una FOTO CLARA de tu identificaci√≥n oficial.',
          'Esto es necesario por seguridad para configurar tu autenticador.'
        ].join('\n'));
        return gotoFlow(flowCapturaIdentificacionAutenticador);
      }

      const infoImagen = obtenerInfoImagen(ctx);
      const myState = await state.getMyState();
      
      await state.update({
        identificacionSubida: true,
        infoIdentificacion: infoImagen,
        timestampIdentificacion: Date.now(),
        imagenIdentificacion: ctx.message
      });

      await flowDynamic('‚úÖ ¬°Perfecto! Hemos recibido tu identificaci√≥n correctamente.');

      const userData = {
        nombre: myState.nombreCompleto || 'Por confirmar',
        identificacion: myState.esTrabajador ? myState.correoInstitucional : myState.numeroControl,
        tipo: myState.esTrabajador ? 'Trabajador' : 'Alumno'
      };

      await enviarIdentificacionAlAdmin(provider, userData);

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowAutenticador);
    }
  );

// ==== Flujo final de autenticador ====
const flowAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, provider, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const myState = (await state.getMyState()) || {};
    const nombreCompleto = myState.nombreCompleto;
    const numeroControl = myState.numeroControl;
    const correoInstitucional = myState.correoInstitucional;
    const esTrabajador = myState.esTrabajador;

    if (!nombreCompleto || (!numeroControl && !correoInstitucional)) {
      console.log('‚ùå Datos incompletos, redirigiendo a captura...');
      await flowDynamic('‚ùå No tenemos tu informaci√≥n completa. Volvamos a empezar.');
      return gotoFlow(flowSubMenuAutenticador);
    }

    await actualizarEstado(state, ESTADOS_USUARIO.EN_PROCESO_LARGO, {
      tipo: "üîë Configuraci√≥n de Autenticador",
      inicio: Date.now(),
      esTrabajador: esTrabajador || false
    });

    const phone = ctx.from;
    const identificacion = esTrabajador ? correoInstitucional : numeroControl;
    const tipoUsuario = esTrabajador ? "Trabajador" : "Alumno";

    const mensajeAdmin = `üîî *NUEVA SOLICITUD DE DESHABILITAR EL AUTENTICADOR* üîî\n\nüìã *Informaci√≥n del usuario:*\nüë§ Nombre: ${nombreCompleto}\nüë• Tipo: ${tipoUsuario}\nüìß ${esTrabajador ? 'Correo' : 'N√∫mero de control'}: ${identificacion}\nüìû Tel√©fono: ${phone}\nüÜî Identificaci√≥n: ${myState.identificacionSubida ? '‚úÖ SUBIDA' : '‚ùå PENDIENTE'}\n‚è∞ Hora: ${new Date().toLocaleString('es-MX')}\n\n‚ö†Ô∏è *Proceso en curso...*`;

    const envioExitoso = await enviarAlAdmin(provider, mensajeAdmin);

    if (envioExitoso) {
      await flowDynamic('‚è≥ Perm√≠tenos un momento, vamos a desconfigurar tu autenticador... \n\n Te solicitamos no enviar mensajes en lo que realizamos est√© proceso, est√© proceso durar√° aproximadamente 30 minutos.');
    } else {
      await flowDynamic('‚ö†Ô∏è Hemos registrado tu solicitud. Si no recibes respuesta, contacta directamente al centro de c√≥mputo.');
    }

    let minutosRestantes = 30;

    const intervalId = setInterval(async () => {
      minutosRestantes -= 10;
      if (minutosRestantes > 0) {
        await flowDynamic(`‚è≥ Hola *${nombreCompleto}*, faltan *${minutosRestantes} minutos* para completar la configuraci√≥n del autenticador...`);
      }
    }, 10 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        intervalId: intervalId
      }
    });

    const timeoutId = setTimeout(async () => {
      clearInterval(intervalId);

      try {
        await flowDynamic(
          '‚úÖ Se desconfigur√≥ correctamente el autenticador de dos factores'
        );

        const correoUsuario = esTrabajador ? correoInstitucional : `${numeroControl}@aguascalientes.tecnm.mx`;

        console.log(`‚úÖ Autenticador desconfigurado correctamente para *${nombreCompleto}* - ${esTrabajador ? 'Correo' : 'Matr√≠cula'}: *${identificacion}*`);

        await flowDynamic(
          `*Es importante que estos pasos los realices en una computadora*,\nya que necesitar√°s tu celular y tu computadora para poder configurar el autenticador. \n\n Paso 1.- Cierra la pesta√±a actual en donde estabas intentando acceder al correo. \n Paso 2.- Ingresa a la p√°gina de: https://office.com o en la p√°gina: https://login.microsoftonline.com/?whr=tecnm.mx para acceder a tu cuenta institucional. \n Paso 3.- Ingresa tu correo institucional recuerda que es: ${correoUsuario} \n Paso 4.- Tu contrase√±a con la que ingresas normalmente \n Paso 5.- Te va a aparecer una p√°gina en donde vas a reconfigurar tu autenticador, sigue los pasos que se te mostrar√°n en la pantalla. Necesitar√°s configurar la aplicaci√≥n de autenticador y tambi√©n debes de ingresar un n√∫mero de tel√©fono.`
        );

        await flowDynamic(
          'üîê Por seguridad, ser√° necesario configurar un nuevo m√©todo de autenticaci√≥n al iniciar sesi√≥n.\n\n üîô Escribe *men√∫* para volver a ver el men√∫ principal.'
        );

      } catch (error) {
        console.error('‚ùå Error enviando mensaje final:', error.message);
      }

      await limpiarEstado(state);
    }, 30 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        timeoutId: timeoutId
      }
    });
  })
  .addAnswer(
    { capture: true },
    async (ctx, { gotoFlow }) => {
      if (ctx.from === CONTACTO_ADMIN) return;
      return gotoFlow(flowBloqueoActivo);
    }
  );

// ==== Flujo final de SIE ====
const flowFinSIE = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, provider }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const myState = (await state.getMyState()) || {};
    const nombreCompleto = myState.nombreCompleto;
    const numeroControl = myState.numeroControl;

    if (!nombreCompleto || !numeroControl) {
      console.log('‚ùå Datos incompletos, redirigiendo a captura...');
      await flowDynamic('‚ùå No tenemos tu informaci√≥n completa. Volvamos a empezar.');
      return gotoFlow(flowCapturaNumeroControlSIE);
    }

    await actualizarEstado(state, ESTADOS_USUARIO.EN_PROCESO_LARGO, {
      tipo: "üìä Sincronizaci√≥n de Datos SIE",
      inicio: Date.now()
    });

    const phone = ctx.from;

    const mensajeAdmin = `üîî *NUEVA SOLICITUD DE SINCRONIZACI√ìN DE DATOS*\nNo le aparece el horario ni las materias en el SIE üîî\n\nüìã *Informaci√≥n del usuario:*\nüë§ Nombre: ${nombreCompleto}\nüî¢ N√∫mero de control: ${numeroControl}\nüìû Tel√©fono: ${phone}\n‚è∞ Hora: ${new Date().toLocaleString('es-MX')}\n\n‚ö†Ô∏è Reacciona para validar que est√° listo`;

    const envioExitoso = await enviarAlAdmin(provider, mensajeAdmin);

    if (envioExitoso) {
      await flowDynamic('‚è≥ Perm√≠tenos un momento, vamos a restablecer tu contrase√±a... \n\n Te solicitamos no enviar mensajes en lo que realizamos est√© proceso, est√© proceso durar√° aproximadamente¬†30¬†minutos.');
    } else {
      await flowDynamic('‚ö†Ô∏è Hemos registrado tu solicitud. Si no recibes respuesta, contacta directamente al centro de c√≥mputo.');
    }

    let minutosRestantes = 30;

    const intervalId = setInterval(async () => {
      minutosRestantes -= 10;
      if (minutosRestantes > 0) {
        await flowDynamic(`‚è≥ Hola *${nombreCompleto}*, faltan *${minutosRestantes} minutos* para completar el proceso...`);
      }
    }, 10 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        intervalId: intervalId
      }
    });

    const timeoutId = setTimeout(async () => {
      clearInterval(intervalId);

      try {
        await flowDynamic(`‚úÖ Se sincronizaron los datos correctamente en tu portal del SIE*`);
        console.log(`‚úÖ Sincronizaci√≥n enviada correctamente a *${nombreCompleto}* con matr√≠cula *${numeroControl}*`);

        await flowDynamic(
          '‚úÖ Ingresa nuevamente al portal del SIE y valida tus datos.\n\n üîô Escribe *men√∫* para volver a ver el men√∫ principal.'
        );

      } catch (error) {
        console.error('‚ùå Error enviando mensaje final:', error.message);
      }

      await limpiarEstado(state);
    }, 30 * 60000);

    await state.update({
      estadoMetadata: {
        ...(await state.getMyState())?.estadoMetadata,
        timeoutId: timeoutId
      }
    });
  })
  .addAnswer(
    { capture: true },
    async (ctx, { gotoFlow }) => {
      if (ctx.from === CONTACTO_ADMIN) return;
      return gotoFlow(flowBloqueoActivo);
    }
  );

// ==== Flujo de captura con timeout ====
const flowCapturaNumeroControl = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en n√∫mero de control');
        await flowDynamic('‚è±Ô∏è No recibimos tu n√∫mero de control. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *n√∫mero de control*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim().toLowerCase();

      if (input === 'menu' || input === 'men√∫') {
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu n√∫mero de control. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNumeroControl);
      }

      if (!isValidText(input) || !validarNumeroControl(input)) {
        await flowDynamic('‚ùå N√∫mero de control inv√°lido. Intenta de nuevo o escribe *men√∫* para volver.');
        return gotoFlow(flowCapturaNumeroControl);
      }

      await state.update({ numeroControl: input });
      await flowDynamic(`‚úÖ Recibimos tu n√∫mero de control: *${input}*`);

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaNombre);
    }
  );

// ==== Flujo de captura para autenticador ====
const flowCapturaNumeroControlAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en n√∫mero de control - autenticador');
        await flowDynamic('‚è±Ô∏è No recibimos tu n√∫mero de control. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *n√∫mero de control*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim().toLowerCase();

      if (input === 'menu' || input === 'men√∫') {
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu n√∫mero de control. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNumeroControlAutenticador);
      }

      if (!isValidText(input) || !validarNumeroControl(input)) {
        await flowDynamic('‚ùå N√∫mero de control inv√°lido. Intenta de nuevo o escribe *men√∫* para volver.');
        return gotoFlow(flowCapturaNumeroControlAutenticador);
      }

      await state.update({ numeroControl: input });
      await flowDynamic(`‚úÖ Recibimos tu n√∫mero de control: *${input}*`);
      return gotoFlow(flowCapturaNombreAutenticador);
    }
  );

// ==== Flujo de captura para SIE ====
const flowCapturaNumeroControlSIE = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en n√∫mero de control - SIE');
        await flowDynamic('‚è±Ô∏è No recibimos tu n√∫mero de control. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *n√∫mero de control*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu n√∫mero de control. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNumeroControlSIE);
      }

      const inputLower = input.toLowerCase();
      if (inputLower === 'menu' || inputLower === 'men√∫') {
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }

      if (!isValidText(input) || !validarNumeroControl(input)) {
        await flowDynamic('‚ùå N√∫mero de control inv√°lido. Intenta de nuevo o escribe *men√∫* para volver.');
        return gotoFlow(flowCapturaNumeroControlSIE);
      }

      await state.update({ numeroControl: input });
      await flowDynamic(`‚úÖ Recibimos tu n√∫mero de control: *${input}*`);
      return gotoFlow(flowCapturaNombreSIE);
    }
  );

// ==== Flujo de captura para nombre (TRABAJADOR) ====
const flowCapturaNombreTrabajador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en nombre trabajador');
        await flowDynamic('‚è±Ô∏è No recibimos tu nombre completo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCapturaNombre: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *nombre completo*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu nombre completo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNombreTrabajador);
      }

      if (!isValidText(input) || !/^[a-zA-Z√Å√â√ç√ì√ö√ë√°√©√≠√≥√∫√±\s]+$/.test(input)) {
        await flowDynamic('‚ùå Solo texto v√°lido. Escribe tu *nombre completo*.');
        return gotoFlow(flowCapturaNombreTrabajador);
      }

      if (input.length < 3) {
        await flowDynamic('‚ùå El nombre parece muy corto. Escribe tu *nombre completo* real.');
        return gotoFlow(flowCapturaNombreTrabajador);
      }

      const myState = (await state.getMyState()) || {};
      const correoInstitucional = myState.correoInstitucional;

      await flowDynamic(`üôå Gracias, *${input}*.\n‚úÖ Registramos tu correo institucional: *${correoInstitucional}*`);
      await state.update({ nombreCompleto: input });

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaIdentificacion);
    }
  );

// ==== Flujo de captura para nombre (TRABAJADOR - AUTENTICADOR) ====
const flowCapturaNombreTrabajadorAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en nombre trabajador - autenticador');
        await flowDynamic('‚è±Ô∏è No recibimos tu nombre completo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCapturaNombre: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *nombre completo*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu nombre completo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNombreTrabajadorAutenticador);
      }

      if (!isValidText(input) || !/^[a-zA-Z√Å√â√ç√ì√ö√ë√°√©√≠√≥√∫√±\s]+$/.test(input)) {
        await flowDynamic('‚ùå Solo texto v√°lido. Escribe tu *nombre completo*.');
        return gotoFlow(flowCapturaNombreTrabajadorAutenticador);
      }

      if (input.length < 3) {
        await flowDynamic('‚ùå El nombre parece muy corto. Escribe tu *nombre completo* real.');
        return gotoFlow(flowCapturaNombreTrabajadorAutenticador);
      }

      const myState = (await state.getMyState()) || {};
      const correoInstitucional = myState.correoInstitucional;

      await flowDynamic(`üôå Gracias, *${input}*.\n‚úÖ Registramos tu correo institucional: *${correoInstitucional}*`);
      await state.update({ nombreCompleto: input });

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaIdentificacionAutenticador);
    }
  );

// ==== Flujo de captura para nombre (contrase√±a) ====
const flowCapturaNombre = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en nombre completo - contrase√±a');
        await flowDynamic('‚è±Ô∏è No recibimos tu nombre completo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCapturaNombre: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *nombre completo*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu nombre completo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNombre);
      }

      if (!isValidText(input) || !/^[a-zA-Z√Å√â√ç√ì√ö√ë√°√©√≠√≥√∫√±\s]+$/.test(input)) {
        await flowDynamic('‚ùå Solo texto v√°lido. Escribe tu *nombre completo*.');
        return gotoFlow(flowCapturaNombre);
      }

      if (input.length < 3) {
        await flowDynamic('‚ùå El nombre parece muy corto. Escribe tu *nombre completo* real.');
        return gotoFlow(flowCapturaNombre);
      }

      const myState = (await state.getMyState()) || {};
      const numeroControl = myState.numeroControl;

      await flowDynamic(`üôå Gracias, *${input}*.\n‚úÖ Registramos tu n√∫mero de control: *${numeroControl}*`);
      await state.update({ nombreCompleto: input });

      timeoutManager.clearTimeout(ctx.from);
      return gotoFlow(flowCapturaIdentificacion);
    }
  );

// ==== Flujo de captura para nombre (autenticador) ====
const flowCapturaNombreAutenticador = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en nombre completo - autenticador');
        await flowDynamic('‚è±Ô∏è No recibimos tu nombre completo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *nombre completo*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu nombre completo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNombreAutenticador);
      }

      if (!isValidText(input) || !/^[a-zA-Z√Å√â√ç√ì√ö√ë√°√©√≠√≥√∫√±\s]+$/.test(input)) {
        await flowDynamic('‚ùå Solo texto v√°lido. Escribe tu *nombre completo*.');
        return gotoFlow(flowCapturaNombreAutenticador);
      }

      if (input.length < 3) {
        await flowDynamic('‚ùå El nombre parece muy corto. Escribe tu *nombre completo* real.');
        return gotoFlow(flowCapturaNombreAutenticador);
      }

      const myState = (await state.getMyState()) || {};
      const numeroControl = myState.numeroControl;

      await flowDynamic(`üôå Gracias, *${input}*.\n‚úÖ Registramos tu n√∫mero de control: *${numeroControl}*`);
      await state.update({ nombreCompleto: input });
      return gotoFlow(flowCapturaIdentificacionAutenticador);
    }
  );

// ==== Flujo de captura para nombre (SIE) ====
const flowCapturaNombreSIE = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    const userPhone = ctx.from;

    const timeout = timeoutManager.setTimeout(userPhone, async () => {
      try {
        console.log('‚è±Ô∏è Timeout de 2 minutos en nombre completo - SIE');
        await flowDynamic('‚è±Ô∏è No recibimos tu nombre completo. Ser√°s redirigido al men√∫.');
        await limpiarEstado(state);
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      } catch (error) {
        console.error('‚ùå Error en timeout de captura:', error);
      }
    }, 2 * 60 * 1000);

    await state.update({
      timeoutCaptura: timeout,
      ultimaInteraccion: Date.now()
    });
  })
  .addAnswer(
    'üìù Por favor escribe tu *nombre completo*:',
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      timeoutManager.clearTimeout(ctx.from);

      const input = ctx.body.trim();

      if (!input || input === '') {
        await flowDynamic('‚ùå No recibimos tu nombre completo. Por favor escr√≠belo.');
        return gotoFlow(flowCapturaNombreSIE);
      }

      if (!isValidText(input) || !/^[a-zA-Z√Å√â√ç√ì√ö√ë√°√©√≠√≥√∫√±\s]+$/.test(input)) {
        await flowDynamic('‚ùå Solo texto v√°lido. Escribe tu *nombre completo*.');
        return gotoFlow(flowCapturaNombreSIE);
      }

      if (input.length < 3) {
        await flowDynamic('‚ùå El nombre parece muy corto. Escribe tu *nombre completo* real.');
        return gotoFlow(flowCapturaNombreSIE);
      }

      const myState = (await state.getMyState()) || {};
      const numeroControl = myState.numeroControl || 'Sin matr√≠cula';

      await flowDynamic(`üôå Gracias, *${input}*.\n‚úÖ Registramos tu n√∫mero de control: *${numeroControl}*`);
      await state.update({ nombreCompleto: input });
      return gotoFlow(flowFinSIE);
    }
  );

// ==== Flujo de restablecimiento de contrase√±a ====
const flowrestablecercontrase = addKeyword(['restablecer']).addAnswer(
  [
    'üìÑ Vamos a comenzar a restablecer la contrase√±a de tu correo institucional',
    '\nüë• Primero necesitamos saber tu tipo de usuario.',
    '\nüîô Escribe *men√∫* para volver a ver el men√∫.'
  ],
  null,
  async (ctx, { gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;
    return gotoFlow(flowSubMenuContrasena);
  }
);

// ==== Flujo de restablecimiento de autenticador ====
const flowrestablecerautenti = addKeyword(['autenticador']).addAnswer(
  [
    'üìÑ Vamos a comenzar a configurar tu autenticador',
    '\nüë• Primero necesitamos saber tu tipo de usuario.',
    '\nüîô Escribe *men√∫* para volver a ver el men√∫.'
  ],
  null,
  async (ctx, { gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;
    return gotoFlow(flowSubMenuAutenticador);
  }
);

// ==== Flujo de restablecimiento de SIE ====
const flowrestablecerSIE = addKeyword(EVENTS.ACTION).addAnswer(
  [
    'üìÑ Vamos a comenzar el proceso de sincronizaci√≥n de tus datos en el *SIE*.',
    '\nüö® Ahora necesitamos tu n√∫mero de control para continuar.',
    '\nüîô Escribe *men√∫* para volver al men√∫ principal.'
  ],
  null,
  async (ctx, { gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;
    return gotoFlow(flowCapturaNumeroControlSIE);
  }
);

// ==== Flujo de agradecimiento ====
const flowGracias = addKeyword(EVENTS.ACTION).addAction(
  async (ctx, { flowDynamic }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    await flowDynamic(
      'üôè ¬°Gracias por comunicarte con el Centro de C√≥mputo del ITA! üíô\n' +
      'Estamos para ayudarte siempre que lo necesites.\n\n' +
      'üîô Escribe *men√∫* si deseas regresar al inicio.'
    )
    console.log('‚úÖ Mensaje de agradecimiento enviada correctamente \n')
  }
)

// ==== Flujo de Educaci√≥n a Distancia ====
const flowDistancia = addKeyword(['Moodle'])
  .addAction(async (ctx, { flowDynamic, gotoFlow, state }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
      return;
    }

    try {
      await flowDynamic([{
        body: 'üòû Por el momento no podemos apoyarte con el restablecimiento de contrase√±a de tu *Moodle*. \nüëâ Te invitamos a asistir a *Coordinaci√≥n de Educaci√≥n a Distancia*. \nüìç Sus oficinas est√°n en el edificio de *Idiomas* (planta baja), frente a la sala Is√≥ptica, a un costado del elevador.',
        media: 'https://raw.githubusercontent.com/CapYAN09/ProyectosITA/main/img/Imagen_de_WhatsApp_2025-09-10_a_las_13.53.25_7b1508b3-removebg-preview.png'
      }])
      console.log('‚úÖ Imagen de Educaci√≥n a distancia enviada correctamente \n')
    } catch (error) {
      console.error('‚ùå Error enviando imagen:', error.message)
      await flowDynamic('üòû Por el momento no podemos apoyarte con el restablecimiento de contrase√±a de tu *Moodle*. \nüëâ Te invitamos a asistir a *Coordinaci√≥n de Educaci√≥n a Distancia*. \nüìç Sus oficinas est√°n en el edificio de *Idiomas* (planta baja), frente a la sala Is√≥ptica, a un costado del elevador.')
    }

    return gotoFlow(flowEsperaMenuDistancia);
  });

// ==== Flujo de acceso al SIE ====
const flowSIE = addKeyword(['sie']).addAnswer(
  'üìö Acceso al SIE\n' +
  'Por favor selecciona una opci√≥n:\n\n' +
  '1Ô∏è‚É£ Restablecer contrase√±a de acceso\n' +
  '2Ô∏è‚É£ No puedo ver mi horario o calificaciones\n\n' +
  'üîô Escribe *men√∫* para volver al men√∫ principal.',
  { capture: true },
  async (ctx, { flowDynamic, gotoFlow, state }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const opcion = ctx.body.trim().toLowerCase();

    if (opcion === 'menu' || opcion === 'men√∫') {
      return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
    }

    if (opcion === '1') {
      await flowDynamic(
        'üîê Para restablecer tu contrase√±a de acceso al SIE, por favor comun√≠cate con tu *Coordinador de Carrera*. Ellos podr√°n asistirte directamente con el restablecimiento.'
      );
      return gotoFlow(flowEsperaMenuSIE);
    }

    if (opcion === '2') {
      return gotoFlow(flowrestablecerSIE);
    }

    await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *1* o *2*.');
    return gotoFlow(flowSIE);
  }
);

// ==== Flujo principal ====
const flowPrincipal = addKeyword(['hola', 'ole', 'alo', 'inicio', 'comenzar', 'empezar', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'Hola', '.', 'Buenas tardes, tengo un problema', 'Buenas noches, tengo un problema', 'Buenos d√≠as, tengo un problema', 'buenas tardes tengo un problema', 'buenas noches tengo un problema', 'buenos d√≠as tengo un problema'])
  .addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
      return;
    }

    await actualizarEstado(state, ESTADOS_USUARIO.EN_MENU);

    try {
      await flowDynamic([{
        body: 'üéâ ¬°Bienvenido al bot de Centro de C√≥mputo del ITA!',
        media: 'https://raw.githubusercontent.com/CapYAN09/ProyectosITA/main/img/Imagen_de_WhatsApp_2025-09-05_a_las_11.03.34_cdb84c7c-removebg-preview.png'
      }])
      console.log('‚úÖ Imagen de bienvenida enviada correctamente \n')
    } catch (error) {
      console.error('‚ùå Error enviando imagen:', error.message)
      await flowDynamic('üéâ ¬°Bienvenido al *AguiBot* del ITA!')
    }

    await flowDynamic(
      'üôå Hola, bienvenido al *Nido de Willy* üê¶ el dia de hoy te encuentras hablando con Willy en Centro de C√≥mputo\n\n' +
      'üìã Men√∫ principal:\n' +
      '1Ô∏è‚É£ Restablecer contrase√±a\n' +
      '2Ô∏è‚É£ Restablecer autenticador\n' +
      '3Ô∏è‚É£ Restablecer contrase√±a de Moodle\n' +
      '4Ô∏è‚É£ Acceso al SIE'
    )
  })
  .addAnswer(
    "Ingresa el n√∫mero de la opci√≥n en la que necesitas apoyo",
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
        return;
      }

      const opcion = ctx.body.trim()

      if (!isValidText(opcion) || !['1', '2', '3', '4'].includes(opcion)) {
        await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *1*, *2*, *3* o *4*.')
        return gotoFlow(flowEsperaPrincipal)
      }

      if (opcion === '1') return gotoFlow(flowrestablecercontrase)
      if (opcion === '2') return gotoFlow(flowrestablecerautenti)
      if (opcion === '3') return gotoFlow(flowDistancia)
      if (opcion === '4') return gotoFlow(flowSIE)
    }
  )

// ==== Flujo de men√∫ ====
const flowMenu = addKeyword(['menu', 'men√∫'])
  .addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
      return;
    }

    await actualizarEstado(state, ESTADOS_USUARIO.EN_MENU);

    await flowDynamic(
      'üìã Men√∫ principal:\n' +
      '1Ô∏è‚É£ Restablecer contrase√±a\n' +
      '2Ô∏è‚É£ Restablecer autenticador\n' +
      '3Ô∏è‚É£ Restablecer contrase√±a de Moodle\n' +
      '4Ô∏è‚É£ Acceso al SIE\n' +
      '5Ô∏è‚É£ Agradecimiento'
    )
  })
  .addAnswer(
    "Ingresa el n√∫mero de la opci√≥n en la que necesitas apoyo",
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic, state }) => {
      if (ctx.from === CONTACTO_ADMIN) return;

      if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
        return;
      }

      if (ctx.body.toLowerCase() === 'estado' || ctx.body.toLowerCase() === 'cancelar' || ctx.body.toLowerCase() === 'ayuda') {
        return gotoFlow(flowComandosEspeciales);
      }

      const opcion = ctx.body.trim()

      if (!isValidText(opcion) || !['1', '2', '3', '4', '5'].includes(opcion)) {
        await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *1*, *2*, *3*, *4* o *5*.')
        return gotoFlow(flowEsperaMenu)
      }

      if (opcion === '1') return gotoFlow(flowrestablecercontrase)
      if (opcion === '2') return gotoFlow(flowrestablecerautenti)
      if (opcion === '3') return gotoFlow(flowDistancia)
      if (opcion === '4') return gotoFlow(flowSIE)
      if (opcion === '5') return gotoFlow(flowGracias)
    }
  )

// ==== Flujo para comandos especiales ====
const flowComandosEspeciales = addKeyword(['estado'])
  .addAction(async (ctx, { state, flowDynamic, gotoFlow }) => {
    if (ctx.from === CONTACTO_ADMIN) return;

    const myState = await state.getMyState();
    const comando = ctx.body.toLowerCase();

    if (comando === 'estado') {
      if (myState?.estadoUsuario === ESTADOS_USUARIO.EN_PROCESO_LARGO) {
        const metadata = myState.estadoMetadata || {};
        const tiempoTranscurrido = Date.now() - (metadata.ultimaActualizacion || Date.now());
        const minutosTranscurridos = Math.floor(tiempoTranscurrido / 60000);
        const minutosRestantes = Math.max(0, 30 - minutosTranscurridos);

        await flowDynamic([
          'üìä **Estado del Proceso**',
          '',
          `üìã ${metadata.tipo || 'Proceso en curso'}`,
          `‚è∞ Tiempo transcurrido: ${minutosTranscurridos} min`,
          `‚è≥ Tiempo restante: ${minutosRestantes} min`,
          '',
          'üîÑ El proceso contin√∫a en segundo plano...',
          '',
          '‚è∞ Se completar√° autom√°ticamente.'
        ].join('\n'));
      } else {
        await flowDynamic('‚úÖ No tienes procesos activos. Ser√°s redirigido al men√∫.');
        return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
      }
    }

    if (myState?.estadoUsuario === ESTADOS_USUARIO.EN_PROCESO_LARGO) {
      return gotoFlow(flowBloqueoActivo);
    }

    return await redirigirAMenuConLimpieza(ctx, state, gotoFlow, flowDynamic);
  });

// ==== Flujos de espera (simplificados) ====
const crearFlujoEspera = (nombre, mensaje) => {
  return addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { state, flowDynamic }) => {
      const timeout = setTimeout(async () => {
        console.log(`‚åõ Tiempo agotado en ${nombre}.`);
        await flowDynamic('‚è±Ô∏è Tiempo agotado. Por favor inicia el bot nuevamente escribiendo *Hola*.');
        await limpiarEstado(state);
      }, 5 * 60 * 1000);

      await state.update({ [`timeout${nombre}`]: timeout });
    })
    .addAnswer(
      mensaje,
      { capture: true },
      async (ctx, { gotoFlow, flowDynamic, state }) => {
        if (ctx.from === CONTACTO_ADMIN) return;

        const input = ctx.body.trim().toLowerCase();

        if (/^men[u√∫]$/i.test(input)) {
          clearTimeout(await state.get(`timeout${nombre}`));
          await limpiarEstado(state);
          return gotoFlow(flowMenu);
        }

        if (input === 'hola') {
          clearTimeout(await state.get(`timeout${nombre}`));
          await limpiarEstado(state);
          return gotoFlow(flowPrincipal);
        }

        await flowDynamic('‚ùå Opci√≥n no v√°lida. Escribe *men√∫* para volver al men√∫ principal.');
        return gotoFlow(flowEsperaMenu);
      }
    );
};

const flowEsperaPrincipal = crearFlujoEspera('Principal', 'üîô Escribe *men√∫* para ver el men√∫ principal.');
const flowEsperaMenu = crearFlujoEspera('Menu', 'üîô Escribe *men√∫* para volver a ver el men√∫ principal.');
const flowEsperaSIE = crearFlujoEspera('SIE', 'üîô Escribe *men√∫* para regresar al men√∫ principal.');
const flowEsperaContrasena = crearFlujoEspera('Contrasena', 'üîô Escribe *men√∫* para regresar al men√∫ principal.');
const flowEsperaAutenticador = crearFlujoEspera('Autenticador', 'üîô Escribe *men√∫* para regresar al men√∫ principal.');
const flowEsperaMenuDistancia = crearFlujoEspera('MenuDistancia', 'üîô Escribe *men√∫* para regresar al men√∫ principal.');
const flowEsperaMenuSIE = crearFlujoEspera('MenuSIE', 'üîô Escribe *men√∫* para regresar al men√∫ principal.');

// ==== Flujo para mensajes no entendidos ====
const flowDefault = addKeyword(EVENTS.WELCOME).addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
  if (ctx.from === CONTACTO_ADMIN) return;

  await reiniciarInactividad(ctx, state, flowDynamic, gotoFlow);

  if (await verificarEstadoBloqueado(ctx, { state, flowDynamic, gotoFlow })) {
    return;
  }

  await flowDynamic([
    'ü§ñ No entiendo ese tipo de mensajes.',
    '',
    'üí° **Comandos disponibles:**',
    '‚Ä¢ *hola* - Reactivar el bot',
    '‚Ä¢ *men√∫* - Ver opciones principales',
    '‚Ä¢ *estado* - Ver progreso de procesos',
    '',
    'üîô Escribe *hola* para comenzar de nuevo.'
  ])
});

// ==== VERIFICACI√ìN DE LA BASE DE DATOS ====
async function verificarBaseDeDatos() {
  try {
    console.log('üîç Verificando conexi√≥n a MySQL...');

    const connection = await crearConexionMySQL();
    if (!connection) {
      console.error('‚ùå No se pudo conectar a la base de datos');
      console.log('üí° Verifica que:');
      console.log('   1. XAMPP est√© ejecut√°ndose');
      console.log('   2. MySQL est√© activo en puerto 3306');
      console.log('   3. La base de datos "bot_whatsapp" exista');
      return false;
    }

    try {
      const [tablas] = await connection.execute(`
        SELECT TABLE_NAME 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_SCHEMA = 'bot_whatsapp' 
        AND TABLE_NAME = 'user_states'
      `);

      if (tablas.length === 0) {
        console.log('üì¶ Creando tabla user_states...');
        await connection.execute(`
          CREATE TABLE user_states (
            user_phone VARCHAR(255) PRIMARY KEY,
            estado_usuario VARCHAR(50) NOT NULL,
            estado_metadata JSON,
            numero_control VARCHAR(20),
            nombre_completo VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          )
        `);
        console.log('‚úÖ Tabla user_states creada exitosamente');
      } else {
        console.log('‚úÖ Tabla user_states encontrada');
      }

      await connection.end();
      return true;

    } catch (error) {
      console.error('‚ùå Error en verificaci√≥n de tabla:', error.message);
      return false;
    }

  } catch (error) {
    console.error('‚ùå Error verificando base de datos:', error.message);
    return false;
  }
}

// ==== Inicializaci√≥n ====
const main = async () => {
  try {
    console.log('üöÄ Iniciando bot de WhatsApp...');

    const dbOk = await verificarBaseDeDatos();
    if (!dbOk) {
      console.log('‚ö†Ô∏è Modo sin base de datos - Los estados no persistir√°n');
    } else {
      console.log('üéØ Base de datos lista - Estados persistir√°n correctamente');
      await inicializarMySQL();
    }

    const adapterFlow = createFlow([
      flowBlockAdmin,
      flowInterceptorGlobal,
      flowComandosEspeciales,
      flowPrincipal,
      flowMenu,
      flowCapturaNumeroControl,
      flowCapturaNombre,
      flowCapturaNumeroControlAutenticador,
      flowCapturaNombreAutenticador,
      flowCapturaNumeroControlSIE,
      flowCapturaNombreSIE,
      flowCapturaCorreoTrabajador,
      flowCapturaNombreTrabajador,
      flowCapturaCorreoTrabajadorAutenticador,
      flowCapturaNombreTrabajadorAutenticador,
      flowCapturaIdentificacion,
      flowCapturaIdentificacionAutenticador,
      flowDistancia,
      flowGracias,
      flowSIE,
      flowrestablecercontrase,
      flowrestablecerautenti,
      flowrestablecerSIE,
      flowContrasena,
      flowAutenticador,
      flowFinSIE,
      flowBloqueoActivo,
      flowEsperaPrincipal,
      flowEsperaMenu,
      flowEsperaSIE,
      flowEsperaContrasena,
      flowEsperaAutenticador,
      flowEsperaMenuDistancia,
      flowEsperaMenuSIE,
      flowDefault
    ])

    const adapterProvider = createProvider(BaileysProvider, {
      printQRInTerminal: true,
      auth: {
        creds: {},
        keys: {}
      },
      logger: {
        level: 'silent'
      },
      markOnlineOnConnect: true,
      generateHighQualityLinkPreview: true,
      reconnect: true,
      maxRetries: 10,
      connectTimeout: 30000,
      keepAliveInterval: 15000,
      getMessage: async (key) => {
        return {
          conversation: 'mensaje no disponible'
        }
      },
      emitOwnEvents: true,
      defaultQueryTimeoutMs: 60000
    });

    console.log('üîß Creando bot...');
    await createBot({
      flow: adapterFlow,
      provider: adapterProvider,
      database: adapterDB
    });

    console.log('‚úÖ Bot iniciado correctamente');
    console.log('üì± Escaneando QR code...');

    QRPortalWeb();

  } catch (error) {
    console.error('‚ùå Error cr√≠tico al iniciar el bot:', error);
  }
}

main();